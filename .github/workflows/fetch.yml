name: Fetch Dune Items

on:
  schedule:
    # Runs daily at 02:07 UTC
    - cron: "7 2 * * *"
  workflow_dispatch: # Manual trigger

jobs:
  fetch-and-cache:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install node-fetch@2
          
      - name: Create fetch script
        run: |
          cat > fetch-data.js << 'ENDSCRIPT'
          const fetch = require('node-fetch');
          const fs = require('fs').promises;
          const path = require('path');
          
          const LANGUAGES = ['en', 'uk', 'ru'];
          const BASE_URL = 'https://dune-api.gaming.tools/items';
          const DELAY = 2000; // 2 seconds between requests
          
          // Custom headers to look more like a browser
          const headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Referer': 'https://dune.gaming.tools/',
            'Origin': 'https://dune.gaming.tools'
          };
          
          async function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }
          
          async function fetchWithRetry(url, retries = 3) {
            for (let i = 0; i < retries; i++) {
              try {
                console.log(`Attempt ${i + 1} for ${url}`);
                const response = await fetch(url, { headers });
                
                if (response.status === 403) {
                  console.log('Got 403, trying with different headers...');
                  // Try with minimal headers
                  const minimalResponse = await fetch(url, {
                    headers: {
                      'User-Agent': 'dune-cache/1.0'
                    }
                  });
                  if (minimalResponse.ok) {
                    return await minimalResponse.json();
                  }
                }
                
                if (!response.ok) {
                  throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                return data;
              } catch (error) {
                console.error(`Attempt ${i + 1} failed:`, error.message);
                if (i < retries - 1) {
                  await sleep(DELAY * (i + 1)); // Exponential backoff
                }
              }
            }
            throw new Error(`Failed to fetch after ${retries} attempts`);
          }
          
          async function main() {
            // Create directories
            await fs.mkdir('public/api', { recursive: true });
            
            const timestamp = new Date().toISOString();
            const results = {};
            
            for (const lang of LANGUAGES) {
              console.log(`\nFetching ${lang}...`);
              const url = `${BASE_URL}?lang=${lang}`;
              
              try {
                const data = await fetchWithRetry(url);
                
                // Save items
                await fs.writeFile(
                  `public/api/items.${lang}.json`,
                  JSON.stringify(data, null, 2)
                );
                
                // Save metadata
                const metadata = {
                  last_updated: timestamp,
                  source: url,
                  language: lang,
                  item_count: Array.isArray(data) ? data.length : Object.keys(data).length
                };
                
                await fs.writeFile(
                  `public/api/meta.${lang}.json`,
                  JSON.stringify(metadata, null, 2)
                );
                
                results[lang] = 'success';
                console.log(`✓ ${lang} fetched successfully`);
                
                // Wait before next request
                await sleep(DELAY);
              } catch (error) {
                console.error(`✗ Failed to fetch ${lang}:`, error.message);
                results[lang] = 'failed';
              }
            }
            
            // Create index
            const index = {
              last_updated: timestamp,
              repository: process.env.GITHUB_REPOSITORY || 'beromario/dune-awakening-api.gaming.tools-cache',
              api_source: 'https://dune-api.gaming.tools',
              reference: 'https://dune.gaming.tools/',
              available_languages: Object.keys(results).filter(lang => results[lang] === 'success'),
              status: results
            };
            
            await fs.writeFile(
              'public/index.json',
              JSON.stringify(index, null, 2)
            );
            
            // Create simple HTML
            const html = `<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Dune Awakening API Cache</title>
              <style>
                  body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                  .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
                  .success { background: #d4edda; color: #155724; }
                  .failed { background: #f8d7da; color: #721c24; }
                  a { color: #0066cc; text-decoration: none; }
                  a:hover { text-decoration: underline; }
                  code { background: #f0f0f0; padding: 2px 6px; border-radius: 3px; }
              </style>
          </head>
          <body>
              <h1>Dune Awakening API Cache</h1>
              <p>Last updated: ${timestamp}</p>
              <p>Reference: <a href="https://dune.gaming.tools/">https://dune.gaming.tools/</a></p>
              
              <h2>Status:</h2>
              ${Object.entries(results).map(([lang, status]) => 
                `<div class="status ${status}">${lang}: ${status}</div>`
              ).join('')}
              
              <h2>Available Files:</h2>
              <ul>
                ${Object.keys(results).filter(lang => results[lang] === 'success').map(lang => 
                  `<li><a href="/api/items.${lang}.json">items.${lang}.json</a></li>`
                ).join('')}
              </ul>
              
              <h2>Usage:</h2>
              <code>https://beromario.github.io/dune-awakening-api.gaming.tools-cache/api/items.uk.json</code>
          </body>
          </html>`;
            
            await fs.writeFile('public/index.html', html);
            
            console.log('\nFetch complete!');
            console.log('Results:', results);
          }
          
          main().catch(error => {
            console.error('Fatal error:', error);
            process.exit(1);
          });
          ENDSCRIPT
          
      - name: Run fetch script
        run: node fetch-data.js
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          
      - name: Fallback - Try with curl and different approach
        if: failure()
        run: |
          echo "Primary fetch failed, trying alternative method..."
          mkdir -p public/api
          
          # Try with wget instead of curl
          for lang in en uk ru; do
            echo "Trying to fetch $lang with wget..."
            wget -q -O "public/api/items.$lang.json" \
              --user-agent="Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0" \
              --header="Accept: application/json" \
              --header="Referer: https://dune.gaming.tools/" \
              "https://dune-api.gaming.tools/items?lang=$lang" || echo "Failed $lang"
            sleep 2
          done
          
          # Check what we got
          ls -la public/api/
          
      - name: Verify files exist
        run: |
          echo "Checking generated files..."
          ls -la public/ || echo "No public directory"
          ls -la public/api/ || echo "No api directory"
          
          # Try to validate at least one file
          if [ -f "public/api/items.uk.json" ]; then
            echo "Ukrainian file exists"
            head -c 500 public/api/items.uk.json
          fi
          
      - name: Setup Pages
        if: success()
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        if: success()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          
      - name: Deploy to GitHub Pages
        if: success()
        id: deployment
        uses: actions/deploy-pages@v4
